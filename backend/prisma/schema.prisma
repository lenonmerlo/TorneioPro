generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Equipe {
  id                  Int       @id @default(autoincrement())
  nome                String
  tipo                String
  atletas             Atleta[]
  partidasComoEquipe1 Partida[] @relation("Equipe1")
  partidasComoEquipe2 Partida[] @relation("Equipe2")
}

model Atleta {
  id      Int     @id @default(autoincrement())
  nome    String
  email   String  @unique 
  genero  String
  equipeId Int?
  nivel   String?

  equipe  Equipe? @relation(fields: [equipeId], references: [id])
  ParticipacaoAmador ParticipacaoAmador[]
}


model Usuario {
  id       Int       @id @default(autoincrement())
  nome     String
  email    String    @unique
  senha    String
  perfil   String
  criadoEm DateTime  @default(now())
  Torneio  Torneio[]
}

model Torneio {
  id          Int           @id @default(autoincrement())
  nome        String
  tipo        TipoTorneio
  data        DateTime
  local       String?
  status      StatusTorneio @default(aberto)
  criadoPorId Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Partida     Partida[]
  criadoPor   Usuario       @relation(fields: [criadoPorId], references: [id])
}

model ParticipacaoAmador {
  id        Int      @id @default(autoincrement())
  atletaId  Int
  atleta    Atleta   @relation(fields: [atletaId], references: [id])
  criadoEm  DateTime @default(now())

  @@unique([atletaId]) // Garante que o mesmo atleta n√£o se inscreva 2x
}


model EquipeOficial {
  id        Int             @id @default(autoincrement())
  nome      String
  tipo      String
  createdAt DateTime        @default(now())
  atletas   AtletaOficial[]
}

model AtletaOficial {
  id       Int           @id @default(autoincrement())
  nome     String
  genero   String
  equipeId Int
  equipe   EquipeOficial @relation(fields: [equipeId], references: [id], onDelete: Cascade)
}

model Partida {
  id            Int      @id @default(autoincrement())
  torneioId     Int
  equipe1Id     Int
  equipe2Id     Int
  pontosEquipe1 Int
  pontosEquipe2 Int
  fase          String
  createdAt     DateTime @default(now())
  equipe1       Equipe   @relation("Equipe1", fields: [equipe1Id], references: [id])
  equipe2       Equipe   @relation("Equipe2", fields: [equipe2Id], references: [id])
  torneio       Torneio  @relation(fields: [torneioId], references: [id])
}

enum StatusTorneio {
  aberto
  fechado
  encerrado
}

enum TipoTorneio {
  amador
  oficial
}

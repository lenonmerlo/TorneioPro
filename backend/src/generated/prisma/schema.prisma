generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuários autenticáveis (ex: treinadores)
model Usuario {
  id       Int      @id @default(autoincrement())
  nome     String
  email    String   @unique
  senha    String
  perfil   String // 'treinador'
  criadoEm DateTime @default(now())

  Torneio   Torneio[] // Torneios criados por este usuário
  Treinador Treinador[]
}

model Treinador {
  id        Int     @id @default(autoincrement())
  nome      String
  email     String  @unique
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId Int     @unique
}

// Atleta é independente de usuário autenticado
model Atleta {
  id     Int     @id @default(autoincrement())
  nome   String
  email  String  @unique
  genero String
  nivel  String? // 'iniciante' ou 'intermediario'

  participacoesAmador ParticipacaoAmador[]
  equipesOficiais     AtletaEquipeOficial[]
  EquipeAmador        EquipeAmador[]        @relation("MembrosEquipeAmador")
}

// Torneio Amador ou Oficial
model Torneio {
  id          Int           @id @default(autoincrement())
  nome        String
  tipo        TipoTorneio
  data        DateTime
  local       String?
  status      StatusTorneio @default(aberto)
  criadoPorId Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  criadoPor          Usuario              @relation(fields: [criadoPorId], references: [id])
  Partida            Partida[]
  equipesAmador      EquipeAmador[]
  equipesOficial     EquipeOficial[]
  ParticipacaoAmador ParticipacaoAmador[]
}

// Participação individual no torneio amador
model ParticipacaoAmador {
  id        Int      @id @default(autoincrement())
  atletaId  Int
  torneioId Int
  criadoEm  DateTime @default(now())

  atleta  Atleta  @relation(fields: [atletaId], references: [id])
  torneio Torneio @relation(fields: [torneioId], references: [id])

  @@unique([atletaId, torneioId])
}

// Equipes sorteadas no torneio amador
model EquipeAmador {
  id        Int     @id @default(autoincrement())
  nome      String
  tipo      String // "Quarteto", "Reserva"
  torneioId Int
  torneio   Torneio @relation(fields: [torneioId], references: [id])

  membros             Atleta[]  @relation("MembrosEquipeAmador")
  partidasComoEquipe1 Partida[] @relation("EquipeAmador1")
  partidasComoEquipe2 Partida[] @relation("EquipeAmador2")
}

// Equipes do torneio oficial
model EquipeOficial {
  id                         Int                   @id @default(autoincrement())
  nome                       String
  tipo                       String // "Dupla", "Trio", "Quarteto"
  createdAt                  DateTime              @default(now())
  torneioId                  Int
  torneio                    Torneio               @relation(fields: [torneioId], references: [id])
  membros                    AtletaEquipeOficial[]
  partidasComoEquipeOficial1 Partida[]             @relation("EquipeOficialPartida1")
  partidasComoEquipeOficial2 Partida[]             @relation("EquipeOficialPartida2")
}

// Junção N:M entre atletas e equipes oficiais
model AtletaEquipeOficial {
  atletaId        Int
  equipeOficialId Int
  atleta          Atleta        @relation(fields: [atletaId], references: [id])
  equipeOficial   EquipeOficial @relation(fields: [equipeOficialId], references: [id])

  @@id([atletaId, equipeOficialId])
}

// Partida genérica (amador e oficial)
model Partida {
  id            Int      @id @default(autoincrement())
  torneioId     Int
  fase          String
  pontosEquipe1 Int?
  pontosEquipe2 Int?
  vencedorId    Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  torneio Torneio @relation(fields: [torneioId], references: [id])

  equipeAmador1Id Int?
  equipeAmador2Id Int?
  equipeAmador1   EquipeAmador? @relation("EquipeAmador1", fields: [equipeAmador1Id], references: [id])
  equipeAmador2   EquipeAmador? @relation("EquipeAmador2", fields: [equipeAmador2Id], references: [id])

  equipeOficial1Id Int?
  equipeOficial2Id Int?
  equipeOficial1   EquipeOficial? @relation("EquipeOficialPartida1", fields: [equipeOficial1Id], references: [id])
  equipeOficial2   EquipeOficial? @relation("EquipeOficialPartida2", fields: [equipeOficial2Id], references: [id])
}

// Enums
enum StatusTorneio {
  aberto
  fechado
  encerrado
}

enum TipoTorneio {
  amador
  oficial
}
